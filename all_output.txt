Creating a Chrome extension involves creating a manifest file that describes the extension, and JavaScript files that implement the extension's functionality. In this case, we will need a background script to interact with the DOM of the current page, a content script to update the extension's UI, and a CSS file to style the UI.

Here are the core files and their purposes:

1. `manifest.json`: This is the manifest file for the Chrome extension. It describes the extension, its version, permissions, and files.

2. `background.js`: This is the background script for the Chrome extension. It scans the DOM for data attributes prefixed with `data-vv-` and sends this data to the content script.

3. `content.js`: This is the content script for the Chrome extension. It receives data from the background script and updates the extension's UI.

4. `styles.css`: This is the CSS file for the Chrome extension. It styles the extension's UI.

5. `popup.html`: This is the HTML file for the Chrome extension's UI. It displays the key-value pairs of the data attributes.

Here is the content of each file:

manifest.json
```
{
  "manifest_version": 2,
  "name": "Data Attribute Scanner",
  "version": "1.0",
  "permissions": ["activeTab"],
  "background": {
    "scripts": ["background.js"],
    "persistent": false
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"]
    }
  ],
  "browser_action": {
    "default_popup": "popup.html"
  }
}
```

background.js
```javascript
chrome.browserAction.onClicked.addListener(function(tab) {
  chrome.tabs.executeScript(tab.id, {file: 'content.js'});
});

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.action === 'getDataAttributes') {
    let dataAttributes = {};
    let elements = document.querySelectorAll('[data-vv-*]');
    elements.forEach(function(element) {
      let attributes = element.attributes;
      for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute.name.startsWith('data-vv-')) {
          dataAttributes[attribute.name] = attribute.value;
        }
      }
    });
    sendResponse(dataAttributes);
  }
});
```

content.js
```javascript
chrome.runtime.sendMessage({action: 'getDataAttributes'}, function(response) {
  let dataAttributes = response;
  let list = document.getElementById('data-attributes');
  for (let key in dataAttributes) {
    let listItem = document.createElement('li');
    listItem.textContent = key + ': ' + dataAttributes[key];
    listItem.addEventListener('mouseover', function() {
      let elements = document.querySelectorAll('[' + key + ']');
      elements.forEach(function(element) {
        element.style.outline = '2px solid red';
      });
    });
    listItem.addEventListener('mouseout', function() {
      let elements = document.querySelectorAll('[' + key + ']');
      elements.forEach(function(element) {
        element.style.outline = '';
      });
    });
    list.appendChild(listItem);
  }
});
```

styles.css
```css
body {
  width: 300px;
  height: 600px;
  overflow: auto;
}

li {
  margin-bottom: 10px;
}
```

popup.html
```html
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <ul id="data-attributes"></ul>
  <script src="content.js"></script>
</body>
</html>
```

This concludes a fully working implementation.